# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, hsz12
# This file is distributed under the same license as the schema_entry
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: schema_entry 0.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-27 22:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../document/schema_entry.rst:2
msgid "schema\\_entry package"
msgstr ""

#: ../../document/schema_entry.rst:5
msgid "Submodules"
msgstr ""

#: ../../document/schema_entry.rst:8
msgid "schema\\_entry.entrypoint module"
msgstr ""

#: ../../document/schema_entry.rst:16
msgid "schema\\_entry.entrypoint\\_base module"
msgstr ""

#: ../../document/schema_entry.rst:24
msgid "schema\\_entry.protocol module"
msgstr ""

#: ../../document/schema_entry.rst:32
msgid "schema\\_entry.utils module"
msgstr ""

#: ../../document/schema_entry.rst:41
msgid "Module contents"
msgstr ""

#~ msgid "Attributes::"
#~ msgstr ""

#~ msgid ""
#~ "epilog (str): 命令行展示介绍时的epilog部分 description "
#~ "(str): 命令行展示介绍时的介绍部分 parent "
#~ "(Optional[\"EntryPointABC\"]): 入口节点的父节点.Default None "
#~ "schema (Optional[Dict[str, Any]]): 入口节点的设置需要满足的json"
#~ " schema对应字典.Default None verify_schema (bool):"
#~ " 获得设置后节点是否校验设置是否满足定义的json schema模式 "
#~ "default_config_file_paths (Sequence[str]): 设置默认的配置文件位置."
#~ " env_prefix (str): 设置环境变量的前缀 parse_env "
#~ "(bool): 展示是否解析环境变量 argparse_check_required  (bool):"
#~ " 命令行参数是否解析必填项为必填项 argparse_noflag (Optional[str]): "
#~ "命令行参数解析哪个字段为无`--`的参数"
#~ msgstr ""

#~ msgid "入口树的构造工具."
#~ msgstr ""

#~ msgid "这个基类的设计目的是为了配置化入口的定义. 通过继承和覆盖基类中的特定字段和方法来实现入口的参数配置读取."
#~ msgstr ""

#~ msgid ""
#~ "目前的实现可以依次从指定路径下的json文件,环境变量,命令行参数读取需要的数据. 然后校验是否符合设定的json "
#~ "schema规定的模式,在符合模式后执行注册进去的回调函数."
#~ msgstr ""

#~ msgid "入口树中可以有中间节点,用于分解复杂命令行参数,中间节点不会执行. 他们将参数传递给下一级节点,直到尾部可以执行为止."
#~ msgstr ""

#~ msgid "基类：:class:`schema_entry.entrypoint_base.EntryPointABC`"
#~ msgstr ""

#~ msgid "注册函数在解析参数成功后执行."
#~ msgstr ""

#~ msgid "执行顺序按被注册的顺序来."
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "待执行的参数."
#~ msgstr ""

#~ msgid "执行配置."
#~ msgstr ""

#~ msgid "配置为只读数据."
#~ msgstr ""

#~ msgid "执行入口函数."
#~ msgstr ""

#~ msgid "实例的名字."
#~ msgstr ""

#~ msgid "实例名字就是它的构造类名."
#~ msgstr ""

#~ msgid "解析获取配置"
#~ msgstr ""

#~ msgid "配置的加载顺序为: 指定路径的配置文件->环境变量->命令行参数"
#~ msgstr ""

#~ msgid "在加载完配置后校验是否满足schema的要求."
#~ msgstr ""

#~ msgid "[description]"
#~ msgstr ""

#~ msgid "默认端点不会再做命令行解析,如果要做则需要在继承时覆盖此方法."
#~ msgstr ""

#~ msgid "命令行解析对象"
#~ msgstr ""

#~ msgid "待解析的参数列表"
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "配置"
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid "从指定的配置文件队列中构造配置参数."
#~ msgstr ""

#~ msgid ""
#~ "目前只支持json格式的配置文件. 指定的配置文件路径队列中第一个json格式且存在的配置文件将被读取解析. "
#~ "一旦读取到了配置后面的路径将被忽略."
#~ msgstr ""

#~ msgid "配置的可能路径"
#~ msgstr ""

#~ msgid "从配置文件中读取到的配置"
#~ msgstr ""

#~ msgid "从环境变量中读取配置."
#~ msgstr ""

#~ msgid ""
#~ "必须设定json schema,且parse_env为True才能从环境变量中读取配置. "
#~ "程序会读取schema结构,并解析其中的`properties`字段.如果没有定义schema则不会解析环境变量."
#~ msgstr ""

#~ msgid "如果是列表型的数据,那么使用`,`分隔,如果是object型的数据,那么使用`key:value;key:value`的形式分隔"
#~ msgstr ""

#~ msgid "环境变量中解析出来的参数."
#~ msgstr ""

#~ msgid "解析复杂命令行参数并将参数传递至下一级."
#~ msgstr ""

#~ msgid "命令路径."
#~ msgstr ""

#~ msgid "注册子命令."
#~ msgstr ""

#~ msgid "子命令的定义类"
#~ msgstr ""

#~ msgid "注册类的实例"
#~ msgstr ""

#~ msgid "子命令的实例"
#~ msgstr ""

#~ msgid "校验配置."
#~ msgstr ""

#~ msgid "在定义好schema,解析到config并且verify_schema为True后才会进行校验."
#~ msgstr ""

#~ msgid "是否通过校验"
#~ msgstr ""

#~ msgid "入口类的抽象基类."
#~ msgstr ""

#~ msgid "基类：:class:`abc.ABC`"
#~ msgstr ""

#~ msgid "程序入口类"
#~ msgstr ""

#~ msgid "命令行展示介绍时的epilog部分"
#~ msgstr ""

#~ msgid "type"
#~ msgstr ""

#~ msgid "str"
#~ msgstr ""

#~ msgid "命令行展示介绍时的介绍部分"
#~ msgstr ""

#~ msgid "入口节点的父节点.Default None"
#~ msgstr ""

#~ msgid "Optional[\"EntryPointABC\"]"
#~ msgstr ""

#~ msgid "入口节点的设置需要满足的json schema对应字典.Default None"
#~ msgstr ""

#~ msgid "Optional[Dict[str, Any]]"
#~ msgstr ""

#~ msgid "获得设置后节点是否校验设置是否满足定义的json schema模式"
#~ msgstr ""

#~ msgid "bool"
#~ msgstr ""

#~ msgid "设置默认的配置文件位置."
#~ msgstr ""

#~ msgid "Sequence[str]"
#~ msgstr ""

#~ msgid "设置环境变量的前缀"
#~ msgstr ""

#~ msgid "展示是否解析环境变量"
#~ msgstr ""

#~ msgid "命令行参数是否解析必填项为必填项"
#~ msgstr ""

#~ msgid "命令行参数解析哪个字段为无`--`的参数"
#~ msgstr ""

#~ msgid "Optional[str]"
#~ msgstr ""

#~ msgid "protocol."
#~ msgstr ""

#~ msgid "用于定义模块支持的可以用于解析的json schema的模式."
#~ msgstr ""

#~ msgid "utils."
#~ msgstr ""

#~ msgid "模块需要的工具."
#~ msgstr ""

#~ msgid "获取父节点树."
#~ msgstr ""

#~ msgid "节点类"
#~ msgstr ""

#~ msgid "父节点树"
#~ msgstr ""

#~ msgid "根据字段的模式解析命令行行为"
#~ msgstr ""

#~ msgid "字段名"
#~ msgstr ""

#~ msgid "字段的模式"
#~ msgstr ""

#~ msgid "添加命令行解析的解析器"
#~ msgstr ""

#~ msgid "命令行的解析器"
#~ msgstr ""

#~ msgid "根据schema的定义解析字符串的值."
#~ msgstr ""

#~ msgid "描述字符串值的json schema字典."
#~ msgstr ""

#~ msgid "待解析的字符串."
#~ msgstr ""

#~ msgid "字段的值"
#~ msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, hsz12
# This file is distributed under the same license as the entry-tree package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: entry-tree 0.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-27 19:20+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../document/entry_tree.rst:2
msgid "模块entry_tree"
msgstr ""

#~ msgid "模块介绍"
#~ msgstr ""

#~ msgid "入口树的构造工具."
#~ msgstr ""

#~ msgid "这个基类的设计目的是为了配置化入口的定义. 通过继承和覆盖基类中的特定字段和方法来实现入口的参数配置读取."
#~ msgstr ""

#~ msgid ""
#~ "目前的实现可以依次从指定路径下的json文件,环境变量,命令行参数读取需要的数据. 然后校验是否符合设定的json "
#~ "schema规定的模式,在符合模式后执行注册进去的回调函数."
#~ msgstr ""

#~ msgid "入口树中可以有中间节点,用于分解复杂命令行参数,中间节点不会执行. 他们将参数传递给下一级节点,直到尾部可以执行为止."
#~ msgstr ""

#~ msgid ""
#~ "Example: >>> class ppm(EntryPoint): ..."
#~ "     \"\"\"ppm <subcmd> [<args>] ...     "
#~ "ppm工具的子命令有: ...         工具自身相关: ...         "
#~ "help              展示ppm的帮助说明 ...         version"
#~ "           展示ppm的版本 ...         reset             "
#~ "将ppm工具的设置初始化 ...         cache             管理ppm的缓存"
#~ " ...     \"\"\" ...     epilog = ''"
#~ " ...     description = '项目脚手架'"
#~ msgstr ""

#~ msgid "基类：:class:`object`"
#~ msgstr ""

#~ msgid "入口类基类."
#~ msgstr ""

#~ msgid "执行配置."
#~ msgstr ""

#~ msgid "执行回调."
#~ msgstr ""

#~ msgid "实例的名字."
#~ msgstr ""

#~ msgid "实例名字就是它的构造类名."
#~ msgstr ""

#~ msgid "解析参数."
#~ msgstr ""

#~ msgid "解析顺序: 指定的文件->环境变量->命令行参数."
#~ msgstr ""

#~ msgid "执行顺序: 解析配置->校验配置->执行回调"
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "命令行参数."
#~ msgstr ""

#~ msgid "默认端点不会再做命令行解析,如果要做则需要在继承时覆盖此方法."
#~ msgstr ""

#~ msgid "从指定的配置文件队列中构造配置参数."
#~ msgstr ""

#~ msgid ""
#~ "目前只支持json格式的配置文件. 指定的配置文件路径队列中第一个json格式且存在的配置文件将被读取解析. "
#~ "一旦读取到了配置后面的路径将被忽略."
#~ msgstr ""

#~ msgid "配置的可能路径"
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "从配置文件中读取到的配置"
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid "从环境变量中读取配置."
#~ msgstr ""

#~ msgid ""
#~ "必须设定json schema才能从环境变量中读取配置. "
#~ "程序会读取schema结构,并解析其中的`properties`字段.如果没有定义schema则不会解析环境变量."
#~ msgstr ""

#~ msgid "如果是列表型的数据,那么使用`,`分隔,如果是object型的数据,那么使用`key:value;key:value`的形式分隔"
#~ msgstr ""

#~ msgid "环境变量中解析出来的参数."
#~ msgstr ""

#~ msgid "解析复杂命令行参数并将参数传递至下一级."
#~ msgstr ""

#~ msgid "命令路径."
#~ msgstr ""

#~ msgid "注册函数在解析参数成功后执行."
#~ msgstr ""

#~ msgid "执行顺序按被注册的顺序来."
#~ msgstr ""

#~ msgid "待执行的参数."
#~ msgstr ""

#~ msgid "注册子命令."
#~ msgstr ""

#~ msgid "子命令的定义类"
#~ msgstr ""

#~ msgid "注册类的实例"
#~ msgstr ""

#~ msgid "子命令的实例"
#~ msgstr ""

#~ msgid "校验配置."
#~ msgstr ""

#~ msgid "是否通过校验"
#~ msgstr ""

#~ msgid "获取父节点树."
#~ msgstr ""

#~ msgid "节点类"
#~ msgstr ""

#~ msgid "父节点树"
#~ msgstr ""


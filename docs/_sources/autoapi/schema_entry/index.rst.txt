:mod:`schema_entry`
===================

.. py:module:: schema_entry


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   entrypoint/index.rst
   entrypoint_base/index.rst
   protocol/index.rst
   utils/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   schema_entry.EntryPoint



.. py:class:: EntryPoint

   Bases: :class:`schema_entry.entrypoint_base.EntryPointABC`

   .. attribute:: epilog
      :annotation: = 

      

   .. attribute:: usage
      :annotation: = 

      

   .. attribute:: parent
      :annotation: :Optional[EntryPointABC]

      

   .. attribute:: schema
      :annotation: :Optional[Dict[str, Any]]

      

   .. attribute:: verify_schema
      :annotation: = True

      

   .. attribute:: default_config_file_paths
      :annotation: :Sequence[str] = []

      

   .. attribute:: env_prefix
      :annotation: :Optional[str]

      

   .. attribute:: parse_env
      :annotation: = True

      

   .. attribute:: argparse_check_required
      :annotation: = False

      

   .. attribute:: argparse_noflag
      :annotation: :Optional[str]

      

   .. method:: name(self) -> str
      :property:


   .. method:: prog(self) -> str
      :property:


   .. method:: config(self) -> Dict[str, Any]
      :property:


   .. method:: regist_subcmd(self, subcmd: EntryPointABC) -> None


   .. method:: regist_sub(self, subcmdclz: type) -> EntryPointABC


   .. method:: as_main(self, func: Callable[..., None]) -> Callable[..., None]


   .. method:: __call__(self, argv: Sequence[str]) -> None


   .. method:: pass_args_to_sub(self, parser: argparse.ArgumentParser, argv: Sequence[str]) -> None


   .. method:: parse_commandline_args(self, parser: argparse.ArgumentParser, argv: Sequence[str]) -> Dict[str, Any]


   .. method:: parse_env_args(self) -> Dict[str, Any]


   .. method:: parse_configfile_args(self) -> Dict[str, Any]


   .. method:: validat_config(self) -> bool


   .. method:: do_main(self) -> None


   .. method:: parse_default(self) -> Dict[str, Any]


   .. method:: parse_args(self, parser: argparse.ArgumentParser, argv: Sequence[str]) -> None




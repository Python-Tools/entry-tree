:mod:`schema_entry.entrypoint`
==============================

.. py:module:: schema_entry.entrypoint

.. autoapi-nested-parse::

   入口树的构造工具.

   这个基类的设计目的是为了配置化入口的定义.
   通过继承和覆盖基类中的特定字段和方法来实现入口的参数配置读取.

   目前的实现可以依次从指定路径下的json文件,环境变量,命令行参数读取需要的数据.
   然后校验是否符合设定的json schema规定的模式,在符合模式后执行注册进去的回调函数.

   入口树中可以有中间节点,用于分解复杂命令行参数,中间节点不会执行.
   他们将参数传递给下一级节点,直到尾部可以执行为止.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   schema_entry.entrypoint.EntryPoint



.. py:class:: EntryPoint

   Bases: :class:`schema_entry.entrypoint_base.EntryPointABC`

   .. attribute:: epilog
      :annotation: = 

      

   .. attribute:: usage
      :annotation: = 

      

   .. attribute:: parent
      :annotation: :Optional[EntryPointABC]

      

   .. attribute:: schema
      :annotation: :Optional[Dict[str, Any]]

      

   .. attribute:: verify_schema
      :annotation: = True

      

   .. attribute:: default_config_file_paths
      :annotation: :Sequence[str] = []

      

   .. attribute:: env_prefix
      :annotation: :Optional[str]

      

   .. attribute:: parse_env
      :annotation: = True

      

   .. attribute:: argparse_check_required
      :annotation: = False

      

   .. attribute:: argparse_noflag
      :annotation: :Optional[str]

      

   .. method:: name(self) -> str
      :property:


   .. method:: prog(self) -> str
      :property:


   .. method:: config(self) -> Dict[str, Any]
      :property:


   .. method:: regist_subcmd(self, subcmd: EntryPointABC) -> None


   .. method:: regist_sub(self, subcmdclz: type) -> EntryPointABC


   .. method:: as_main(self, func: Callable[..., None]) -> Callable[..., None]


   .. method:: __call__(self, argv: Sequence[str]) -> None


   .. method:: pass_args_to_sub(self, parser: argparse.ArgumentParser, argv: Sequence[str]) -> None


   .. method:: parse_commandline_args(self, parser: argparse.ArgumentParser, argv: Sequence[str]) -> Dict[str, Any]


   .. method:: parse_env_args(self) -> Dict[str, Any]


   .. method:: parse_configfile_args(self) -> Dict[str, Any]


   .. method:: validat_config(self) -> bool


   .. method:: do_main(self) -> None


   .. method:: parse_default(self) -> Dict[str, Any]


   .. method:: parse_args(self, parser: argparse.ArgumentParser, argv: Sequence[str]) -> None




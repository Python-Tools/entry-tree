:mod:`schema_entry.entrypoint`
==============================

.. py:module:: schema_entry.entrypoint

.. autoapi-nested-parse::

   入口树的构造工具.

   这个基类的设计目的是为了配置化入口的定义.
   通过继承和覆盖基类中的特定字段和方法来实现入口的参数配置读取.

   目前的实现可以依次从指定路径下的json文件,环境变量,命令行参数读取需要的数据.
   然后校验是否符合设定的json schema规定的模式,在符合模式后执行注册进去的回调函数.

   入口树中可以有中间节点,用于分解复杂命令行参数,中间节点不会执行.
   他们将参数传递给下一级节点,直到尾部可以执行为止.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   schema_entry.entrypoint.EntryPoint



.. py:class:: EntryPoint

   Bases: :class:`schema_entry.entrypoint_base.EntryPointABC`

   程序入口类.

   .. attribute:: epilog

      命令行展示介绍时的epilog部分

      :type: str

   .. attribute:: usage

      命令行展示介绍时的使用方法介绍

      :type: str

   .. attribute:: parent

      入口节点的父节点.Default None

      :type: Optional["EntryPointABC"]

   .. attribute:: schema

      入口节点的设置需要满足的json schema对应字典.Default None

      :type: Optional[Dict[str, Any]]

   .. attribute:: verify_schema

      获得设置后节点是否校验设置是否满足定义的json schema模式

      :type: bool

   .. attribute:: default_config_file_paths

      设置默认的配置文件位置.

      :type: Sequence[str]

   .. attribute:: env_prefix

      设置环境变量的前缀

      :type: str

   .. attribute:: parse_env

      展示是否解析环境变量

      :type: bool

   .. attribute:: argparse_check_required

      命令行参数是否解析必填项为必填项

      :type: bool

   .. attribute:: argparse_noflag

      命令行参数解析哪个字段为无`--`的参数

      :type: Optional[str]

   .. attribute:: epilog
      :annotation: = 

      

   .. attribute:: usage
      :annotation: = 

      

   .. attribute:: _name
      :annotation: = 

      

   .. attribute:: parent
      

      

   .. attribute:: schema
      

      

   .. attribute:: verify_schema
      :annotation: = True

      

   .. attribute:: default_config_file_paths
      :annotation: :List[str] = []

      

   .. attribute:: config_file_only_get_need
      :annotation: = True

      

   .. attribute:: env_prefix
      

      

   .. attribute:: parse_env
      :annotation: = True

      

   .. attribute:: argparse_check_required
      :annotation: = False

      

   .. attribute:: argparse_noflag
      

      

   .. method:: _check_schema(self) -> None


   .. method:: name(self) -> str
      :property:

      实例的名字.

      实例名字就是它的构造类名.


   .. method:: prog(self) -> str
      :property:

      命令路径.


   .. method:: config(self) -> Dict[str, Any]
      :property:

      执行配置.

      配置为只读数据.


   .. method:: regist_subcmd(self, subcmd: EntryPointABC) -> None

      注册子命令.

      :param subcmd: 子命令的实例
      :type subcmd: EntryPointABC


   .. method:: regist_sub(self, subcmdclz: type) -> EntryPointABC

      注册子命令.

      :param subcmdclz: 子命令的定义类
      :type subcmdclz: EntryPointABC

      :returns: 注册类的实例
      :rtype: [EntryPointABC]


   .. method:: as_main(self, func: Callable[..., None]) -> Callable[..., None]

      注册函数在解析参数成功后执行.

      执行顺序按被注册的顺序来.

      :param func: 待执行的参数.
      :type func: Callable[[Dict[str,Any]],None]


   .. method:: __call__(self, argv: Sequence[str]) -> None

      执行命令.

      如果当前的命令节点不是终点(也就是下面还有子命令)则传递参数到下一级;
      如果当前节点已经是终点则解析命令行参数,环境变量,指定路径后获取参数,然后构造成配置,并检验是否符合定义的json schema模式.
      然后如果通过验证并有注册执行函数的话则执行注册的函数.

      :param argv: [description]
      :type argv: Sequence[str]


   .. method:: pass_args_to_sub(self, parser: argparse.ArgumentParser, argv: Sequence[str]) -> None

      解析复杂命令行参数并将参数传递至下一级.


   .. method:: _make_commandline_parse_by_schema(self, parser: argparse.ArgumentParser) -> argparse.ArgumentParser


   .. method:: _parse_commandline_args_by_schema(self, parser: argparse.ArgumentParser, argv: Sequence[str]) -> Tuple[Dict[str, Any], Dict[str, Any]]


   .. method:: parse_commandline_args(self, parser: argparse.ArgumentParser, argv: Sequence[str]) -> Tuple[Dict[str, Any], Dict[str, Any]]

      解析命令行获得参数

      :param parser: 命令行解析器
      :type parser: argparse.ArgumentParser
      :param argv: 命令行参数序列
      :type argv: Sequence[str]

      :returns: 命令行指定配置文件获得的参数,其他命令行参数获得的参数
      :rtype: Tuple[Dict[str, Any], Dict[str, Any]]


   .. method:: _parse_env_args(self, key: str, info: Dict[str, Any]) -> Any


   .. method:: parse_env_args(self) -> Dict[str, Any]

      从环境变量中读取配置.

      必须设定json schema,且parse_env为True才能从环境变量中读取配置.
      程序会读取schema结构,并解析其中的`properties`字段.如果没有定义schema则不会解析环境变量.

      如果是列表型的数据,那么使用`,`分隔,如果是object型的数据,那么使用`key:value;key:value`的形式分隔

      :returns: 环境变量中解析出来的参数.
      :rtype: Dict[str,Any]


   .. method:: parse_json_configfile_args(self, p: Path) -> Dict[str, Any]


   .. method:: parse_yaml_configfile_args(self, p: Path) -> Dict[str, Any]


   .. method:: parse_configfile_args(self) -> Dict[str, Any]

      从指定的配置文件队列中构造配置参数.

      目前只支持json格式的配置文件.
      指定的配置文件路径队列中第一个json格式且存在的配置文件将被读取解析.
      一旦读取到了配置后面的路径将被忽略.

      :param argv: 配置的可能路径
      :type argv: Sequence[str]

      :returns: 从配置文件中读取到的配置
      :rtype: Dict[str,Any]


   .. method:: validat_config(self) -> bool

      校验配置.

      在定义好schema,解析到config并且verify_schema为True后才会进行校验.


      :returns: 是否通过校验
      :rtype: bool


   .. method:: do_main(self) -> None

      执行入口函数.


   .. method:: parse_default(self) -> Dict[str, Any]


   .. method:: parse_args(self, parser: argparse.ArgumentParser, argv: Sequence[str]) -> None

      解析获取配置

      配置的加载顺序为: 指定路径的配置文件->环境变量->命令行参数

      在加载完配置后校验是否满足schema的要求.

      :param parser: [description]
      :type parser: argparse.ArgumentParser
      :param argv: [description]
      :type argv: Sequence[str]



